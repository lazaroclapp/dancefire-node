{"ts":1380142327561,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//\n// # SimpleServer\n//\n// A simple chat server using Socket.IO, Express, and Async.\n//\nvar http = require('http');\nvar path = require('path');\n\nvar async = require('async');\nvar socketio = require('socket.io');\nvar express = require('express');\n\n//\n// ## SimpleServer `SimpleServer(obj)`\n//\n// Creates a new instance of SimpleServer with the following options:\n//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.\n//\nvar router = express();\nvar server = http.createServer(router);\nvar io = socketio.listen(server);\n\nrouter.use(express.static(path.resolve(__dirname, 'client')));\nvar messages = [];\nvar sockets = [];\n\nio.on('connection', function (socket) {\n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names);\n    }\n  );\n}\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}\n\nserver.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":1931}]],"length":1931}
{"contributors":[],"silentsave":false,"ts":1380176042576,"patch":[[{"diffs":[[0,"));\n"],[-1,"var messages = [];\nvar sockets = [];\n\nio.on('connection', function (socket) {\n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names"],[1,"\nio.sockets.on('connection', function (socket) {\n  socket.on('android', function (data) {\n    console.log(data"],[0,");\n"],[-1,"  "],[0,"  }"],[-1,"\n  "],[0,");\n}"],[-1,"\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}"],[1,");"],[0,"\n\nse"]],"start1":623,"start2":623,"length1":1119,"length2":130}]],"length":942,"saved":false}
{"ts":1380176408167,"patch":[[{"diffs":[[0,"cket) {\n"],[1,"  console.log('\\ngot a new connection from: ' + socket.id + '\\n');\n"],[0,"  socket"]],"start1":668,"start2":668,"length1":16,"length2":83}]],"length":1009,"saved":false}
{"ts":1380179210360,"patch":[[{"diffs":[[0,"rver);\n\n"],[1,"var force = 0;\n\napp.post('/android', function(req, res){\n    console.log(req);\n    res.send('');\n});\n\n"],[0,"router.u"]],"start1":556,"start2":556,"length1":16,"length2":118}]],"length":1111,"saved":false}
{"ts":1380179231177,"patch":[[{"diffs":[[0,"0;\n\n"],[-1,"app"],[1,"router"],[0,".pos"]],"start1":576,"start2":576,"length1":11,"length2":14}]],"length":1114,"saved":false}
{"ts":1380182245175,"patch":[[{"diffs":[[0,"e = 0;\n\n"],[1,"router.use(express.bodyParser());\n\n"],[0,"router.p"]],"start1":572,"start2":572,"length1":16,"length2":51},{"diffs":[[0,"ole.log("],[-1,"req"],[1,"'Force: ' + req.body.force"],[0,");\n    r"]],"start1":667,"start2":667,"length1":19,"length2":42}]],"length":1172,"saved":false}
{"ts":1380183171844,"patch":[[{"diffs":[[0,", res){\n"],[1,"    io.sockets.emit(req.body.force);\n"],[0,"    cons"]],"start1":651,"start2":651,"length1":16,"length2":53},{"diffs":[[0,"');\n"],[-1,"  socket.on('android', function (data) {\n    console.log(data);\n  });\n"],[0,"});\n"]],"start1":939,"start2":939,"length1":78,"length2":8}]],"length":1139,"saved":false}
{"ts":1380183365676,"patch":[[{"diffs":[[0,"ts.emit("],[1,"'force', "],[0,"req.body"]],"start1":671,"start2":671,"length1":16,"length2":25}]],"length":1148,"saved":false}
